{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Ubaid%20Bhat/Downloads/download/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Ubaid%20Bhat/Downloads/download/src/ai/flows/summarize-email.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview Email summarization AI agent.\n *\n * - summarizeEmail - A function that handles the email summarization process.\n * - SummarizeEmailInput - The input type for the summarizeEmail function.\n * - SummarizeEmailOutput - The return type for the summarizeEmail function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst SummarizeEmailInputSchema = z.object({\n  emailBody: z.string().describe('The body of the email to summarize.'),\n});\nexport type SummarizeEmailInput = z.infer<typeof SummarizeEmailInputSchema>;\n\nconst SummarizeEmailOutputSchema = z.object({\n  summary: z.string().describe('A summary of the email.'),\n});\nexport type SummarizeEmailOutput = z.infer<typeof SummarizeEmailOutputSchema>;\n\nexport async function summarizeEmail(input: SummarizeEmailInput): Promise<SummarizeEmailOutput> {\n  return summarizeEmailFlow(input);\n}\n\nconst summarizeEmailPrompt = ai.definePrompt({\n  name: 'summarizeEmailPrompt',\n  input: {schema: SummarizeEmailInputSchema},\n  output: {schema: SummarizeEmailOutputSchema},\n  prompt: `Summarize the following email:\n\n{{{emailBody}}}`,\n});\n\nconst summarizeEmailFlow = ai.defineFlow(\n  {\n    name: 'summarizeEmailFlow',\n    inputSchema: SummarizeEmailInputSchema,\n    outputSchema: SummarizeEmailOutputSchema,\n  },\n  async input => {\n    const {output} = await summarizeEmailPrompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,4BAA4B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACzC,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACjC;AAGA,MAAM,6BAA6B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1C,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC/B;AAGO,eAAe,eAAe,KAA0B;IAC7D,OAAO,mBAAmB;AAC5B;AAEA,MAAM,uBAAuB,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC3C,MAAM;IACN,OAAO;QAAC,QAAQ;IAAyB;IACzC,QAAQ;QAAC,QAAQ;IAA0B;IAC3C,QAAQ,CAAC;;eAEI,CAAC;AAChB;AAEA,MAAM,qBAAqB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACtC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,qBAAqB;IAC5C,OAAO;AACT;;;IAtBoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 287, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Ubaid%20Bhat/Downloads/download/src/lib/types.ts"],"sourcesContent":["import { z } from 'zod';\n\nexport interface Email {\n  id: string; // Changed to string for mail.gw API\n  from: string;\n  subject: string;\n  date: string;\n  expiresIn?: string;\n}\n\nexport interface EmailMessage {\n  id: string; // Changed to string for mail.gw API\n  from: string;\n  to: string;\n  subject: string;\n  date: string;\n  attachments: {\n    filename: string;\n    contentType: string;\n    size: number;\n  }[];\n  body: string;\n  textBody: string;\n  htmlBody: string;\n}\n\nexport const AddressSchema = z.object({\n  street: z.string().describe('The street address, including the house or building number.'),\n  city: z.string().describe('The city or town.'),\n  state: z.string().describe('The state, province, or region.'),\n  postalCode: z.string().describe('The postal or ZIP code.'),\n  country: z.string().describe('The country.'),\n});\n\nexport type Address = z.infer<typeof AddressSchema>;\n\n\nexport const GenerateAddressInputSchema = z.object({\n  country: z.string().optional().describe('The country to generate an address from.'),\n});\n\nexport type GenerateAddressInput = z.infer<typeof GenerateAddressInputSchema>;\n"],"names":[],"mappings":";;;;AAAA;;AA0BO,MAAM,gBAAgB,kKAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACpC,QAAQ,kKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC5B,MAAM,kKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC1B,OAAO,kKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC3B,YAAY,kKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAChC,SAAS,kKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC/B;AAKO,MAAM,6BAA6B,kKAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACjD,SAAS,kKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;AAC1C","debugId":null}},
    {"offset": {"line": 309, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Ubaid%20Bhat/Downloads/download/src/ai/flows/generate-address-flow.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview A random address generation AI agent.\n *\n * - generateRandomAddress - A function that handles the random address generation process.\n * - GenerateAddressOutput - The return type for the generateRandomAddress function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\nimport { Address, AddressSchema, GenerateAddressInput, GenerateAddressInputSchema } from '@/lib/types';\n\n\nexport async function generateRandomAddress(input?: GenerateAddressInput): Promise<Address> {\n  return generateAddressFlow(input);\n}\n\nconst generateAddressPrompt = ai.definePrompt({\n  name: 'generateAddressPrompt',\n  input: {schema: GenerateAddressInputSchema.optional()},\n  output: {schema: AddressSchema},\n  prompt: `Generate a single, realistic but fake physical address.\n  {{#if country}}\n  The address must be from {{country}}.\n  {{else}}\n  The address can be from any random country.\n  {{/if}}\n  The address should look authentic for the country it's from.`,\n});\n\nconst generateAddressFlow = ai.defineFlow(\n  {\n    name: 'generateAddressFlow',\n    inputSchema: GenerateAddressInputSchema.optional(),\n    outputSchema: AddressSchema,\n  },\n  async (input) => {\n    const {output} = await generateAddressPrompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;CAKC,GAED;AAEA;;;;;;AAGO,eAAe,sBAAsB,KAA4B;IACtE,OAAO,oBAAoB;AAC7B;AAEA,MAAM,wBAAwB,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC5C,MAAM;IACN,OAAO;QAAC,QAAQ,mHAAA,CAAA,6BAA0B,CAAC,QAAQ;IAAE;IACrD,QAAQ;QAAC,QAAQ,mHAAA,CAAA,gBAAa;IAAA;IAC9B,QAAQ,CAAC;;;;;;8DAMmD,CAAC;AAC/D;AAEA,MAAM,sBAAsB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACvC;IACE,MAAM;IACN,aAAa,mHAAA,CAAA,6BAA0B,CAAC,QAAQ;IAChD,cAAc,mHAAA,CAAA,gBAAa;AAC7B,GACA,OAAO;IACL,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,sBAAsB;IAC7C,OAAO;AACT;;;IA1BoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 364, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Ubaid%20Bhat/Downloads/download/src/lib/actions.ts"],"sourcesContent":["'use server';\n\nimport { summarizeEmail } from '@/ai/flows/summarize-email';\nimport { generateRandomAddress } from '@/ai/flows/generate-address-flow';\nimport type { Address, GenerateAddressInput } from './types';\n\nexport async function getSummary(emailBody: string): Promise<{ summary?: string; error?: string }> {\n  if (!emailBody || emailBody.trim().length < 20) { // Add a minimum length check\n    return { error: 'Email content is too short to summarize.' };\n  }\n  \n  try {\n    const result = await summarizeEmail({ emailBody });\n    return { summary: result.summary };\n  } catch (error) {\n    console.error('Error getting summary:', error);\n    return { error: 'An AI error occurred while generating the summary.' };\n  }\n}\n\nexport async function getRandomAddress(input?: GenerateAddressInput): Promise<{ address?: Address; error?: string }> {\n  try {\n    const result = await generateRandomAddress(input);\n    return { address: result };\n  } catch (error) {\n    console.error('Error generating address:', error);\n    return { error: 'An AI error occurred while generating the address.' };\n  }\n}\n"],"names":[],"mappings":";;;;;;AAEA;AACA;;;;;;AAGO,eAAe,WAAW,SAAiB;IAChD,IAAI,CAAC,aAAa,UAAU,IAAI,GAAG,MAAM,GAAG,IAAI;QAC9C,OAAO;YAAE,OAAO;QAA2C;IAC7D;IAEA,IAAI;QACF,MAAM,SAAS,MAAM,CAAA,GAAA,wIAAA,CAAA,iBAAc,AAAD,EAAE;YAAE;QAAU;QAChD,OAAO;YAAE,SAAS,OAAO,OAAO;QAAC;IACnC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0BAA0B;QACxC,OAAO;YAAE,OAAO;QAAqD;IACvE;AACF;AAEO,eAAe,iBAAiB,KAA4B;IACjE,IAAI;QACF,MAAM,SAAS,MAAM,CAAA,GAAA,iJAAA,CAAA,wBAAqB,AAAD,EAAE;QAC3C,OAAO;YAAE,SAAS;QAAO;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,OAAO;YAAE,OAAO;QAAqD;IACvE;AACF;;;IAtBsB;IAcA;;AAdA,+OAAA;AAcA,+OAAA","debugId":null}},
    {"offset": {"line": 423, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Ubaid%20Bhat/Downloads/download/.next-internal/server/app/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {getSummary as '40680f4bb6fd40146eba0a83fc8d35f5c4b505bed4'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 481, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Ubaid%20Bhat/Downloads/download/src/components/mail-veil.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/mail-veil.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/mail-veil.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgS,GAC7T,8DACA","debugId":null}},
    {"offset": {"line": 495, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Ubaid%20Bhat/Downloads/download/src/components/mail-veil.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/mail-veil.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/mail-veil.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA4Q,GACzS,0CACA","debugId":null}},
    {"offset": {"line": 509, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 519, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Ubaid%20Bhat/Downloads/download/src/app/page.tsx"],"sourcesContent":["import MailVeil from '@/components/mail-veil';\nimport { Suspense } from 'react';\nimport Loading from './loading';\n\nexport default function Home() {\n  return (\n    <main>\n      <Suspense fallback={<Loading />}>\n        <MailVeil />\n      </Suspense>\n    </main>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;;AAEe,SAAS;IACtB,qBACE,8OAAC;kBACC,cAAA,8OAAC,qMAAA,CAAA,WAAQ;YAAC,wBAAU,8OAAC,sHAAA,CAAA,UAAO;;;;;sBAC1B,cAAA,8OAAC,kIAAA,CAAA,UAAQ;;;;;;;;;;;;;;;AAIjB","debugId":null}}]
}